generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          UserRole  @default(CUSTOMER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Movie {
  id                Int      @id
  poster_path       String?
  title             String
  release_date      String
  runtime           Float
  vote_average      Float
  status            String
  showtimes         Showtime[]

  @@map("movies")
}

model ScreeningRoom {
  id       Int    @id @default(autoincrement())
  name     String
  capacity Int
  showtimes Showtime[]

  @@map("screening_rooms")
}

model Showtime {
  id              Int            @id @default(autoincrement())
  movieId         Int
  screeningRoomId Int
  startTime       DateTime
  price           Float

  movie           Movie          @relation(fields: [movieId], references: [id], onDelete: Cascade)
  screeningRoom   ScreeningRoom  @relation(fields: [screeningRoomId], references: [id], onDelete: Cascade)
  bookings        Booking[]

  @@map("showtimes")
}

model Booking {
  id         Int      @id @default(autoincrement())
  userId     String
  showtimeId Int
  seats      Int
  totalPrice Float
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  showtime   Showtime @relation(fields: [showtimeId], references: [id], onDelete: Cascade)

  @@map("bookings")
}
