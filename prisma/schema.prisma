generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          UserRole  @default(CUSTOMER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Movie {
  id            Int        @id @default(autoincrement())
  title         String
  backdrop_path String?
  poster_path   String?
  release_date  String?
  overview      String?
  runtime       Int
  vote_average  Float?
  status        String     
  showtimes     Showtime[]

  @@map("movies")
}

model ScreeningRoom {
  id        Int        @id @default(autoincrement())
  name      String
  capacity  Int        @default(50)
  showtimes Showtime[]
  seats     Seat[]

  @@map("screening_rooms")
}

model Seat {
  id              Int           @id @default(autoincrement())
  row             String        // A -> E
  number          Int           // 1 -> 10 (10 ghế mỗi hàng)
  screeningRoomId Int
  screeningRoom   ScreeningRoom @relation(fields: [screeningRoomId], references: [id])
  bookingSeats    BookingSeat[]

  @@unique([row, number, screeningRoomId])
  @@map("seats")
}

model BookingSeat {
  id         Int      @id @default(autoincrement())
  bookingId  Int
  seatId     Int
  showtimeId Int
  status     String   @default("PROCESSING") // PROCESSING, BOOKED
  
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  seat       Seat     @relation(fields: [seatId], references: [id])
  showtime   Showtime @relation(fields: [showtimeId], references: [id])

  @@unique([seatId, showtimeId])
  @@map("booking_seats")
}

model Showtime {
  id              Int           @id @default(autoincrement())
  movieId         Int
  movie           Movie         @relation(fields: [movieId], references: [id])
  screeningRoomId Int
  screeningRoom   ScreeningRoom @relation(fields: [screeningRoomId], references: [id])
  date            DateTime      
  time            String        
  price           Float
  bookings        Booking[]
  bookingSeats    BookingSeat[]

  @@map("showtimes")
}

model Booking {
  id          Int           @id @default(autoincrement())
  showtimeId  Int
  userId      String
  totalPrice  Float
  status      String       @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  createdAt   DateTime     @default(now())
  bookingSeats BookingSeat[]
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  showtime    Showtime     @relation(fields: [showtimeId], references: [id], onDelete: Cascade)

  @@map("bookings")
}
